#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
PACKAGE = "robotrainer_controllers"

gen = ParameterGenerator()

controlDimensions_enum = gen.enum([ gen.const("X", int_t, 0, "Enable Passive Behavior Control for x dimension only."),
                                                        gen.const("Y", int_t, 1, "Enable Passive Behavior Control for y dimension only."),
                                                        gen.const("X_and_Y", int_t, 2, "Enable Passive Behavior Control for X and Y dimensions (no torque behavior control)."),
                                                        gen.const("Dominant_Dimension", int_t, 3, "Enable Passive Behavior Control the dominant dimension (based on current velocity)."),
                                                        gen.const("All", int_t, 4, "Enable Passive Behavior Control for all dimensions (including torque control).")],
                                                                        "Switch the Dimension for which Passive Behavior Control is active.")
gen.add("control_dimensions", int_t, 1, "Dimensions for which the passive behavior controller is active", 0, 0, 4, edit_method=controlDimensions_enum)

conditional_instability_detection = gen.add_group("Conditional Instability detection parameters")
conditional_instability_detection.add("enableConditionalInstabilityDetection", bool_t, 0, "Whether to enable the conditional instability feature (only works for InputForceMD)", True)
conditional_instability_detection.add("minimum_stable_duration", double_t, 0, "Duration for which the robot must be stable in order to ignore a first decelerating instability situation", 0.5, 0.25, 3.0)
conditional_instability_detection.add("extremely_instable_duration", double_t, 0, "Duration after which an instable situation is considered extremely instable and the dimension completely deactivated for safety reasons", 0.8, 0.25, 3.0)
conditional_instability_detection.add("deactivate_all_dimensions_on_extreme_instability", bool_t, 0, "Whether to deactivate all dimensions on extreme instability one one or not", True)
conditional_instability_detection.add("reset_cooldown_after_instability", double_t, 0, "Duration for which the robot must be stable in the respective dimension after previous extreme instability in order to scale the dimension up again", 1.0, 0.2, 3.0)
conditional_instability_detection.add("direction_window_size", int_t, 0, "Size of the window which determines a change of direction", 10, 5, 50)

gen.add("instable_threshold_x", double_t, 0, "Threshold for x dimension, under which integral value the robot is considered instable (default is 0.0, lower values ignore certain instabilities)", 0.0, -0.1, 0.0)
gen.add("instable_threshold_y", double_t, 0, "Threshold for y dimension, under which integral value the robot is considered instable (default is 0.0, lower values ignore certain instabilities)", -0.0, -0.1, 0.0)
gen.add("instable_threshold_z", double_t, 0, "Threshold for z dimension, under which integral value the robot is considered instable (default is 0.0, lower values ignore certain instabilities)", -0.0, -0.1, 0.0)

detectionMethod_enum = gen.enum([ gen.const("No",  int_t, 0, "No integral used, turning passive behavior off"),
                                                        gen.const("Chuy", int_t, 1, "Use the chuy 2007 energy limitation method"),
                                                        gen.const("InputForceSD", int_t, 2, "Use Single-Dimensional sliding window energy limitation"),
                                                        gen.const("InputForceMD", int_t, 3, "Use Multi-Dimensional sliding window energy limitation")],
                                                                        "Switch the energy limitation method which to use, or use none.")
gen.add("detection_method", int_t, 0, "Energy limitation method to use", 3, 0, 3, edit_method=detectionMethod_enum)

gen.add("integral_window_size", int_t , 0 ,"The length of the integral_window", 32, 1, 1024)
gen.add("integral_use_reset", bool_t, 0, "Whether to reset the integralvalue if energy of system is negative and power is positive or not", False)
gen.add("robot_virt_mass", double_t , 0 ,"The mass of the robot", 80.0, 0.01, 120)
gen.add("system_const", double_t, 0, "Represents the system", 1.2, 0.01, 5.0)
gen.add("adapt_inputForce_Xval_scale", double_t, 0, "Parameter for adapting input Force in x direction", 0.01, 0.0001, 0.1)
gen.add("adapt_inputForce_Yval_scale", double_t, 0, "Parameter for adapting input Force in y direction", 0.01, 0.0001, 0.1)
gen.add("adapt_inputForce_Tval_scale", double_t, 0, "Parameter for adapting input torque around z-axis", 0.01, 0.0001, 0.1)
gen.add("max_adaption", double_t , 0 ,"Maximum factor used for scaling input Force", 1.0, 0.01, 2.0)
gen.add("min_adaption", double_t , 0 ,"Minimum factor used for scaling input Force", 0.01, 0.001, 0.5)
gen.add("eps", double_t , 0 ,"", 0.001, 0.0001, 1.0)
gen.add("scale_down_time", double_t , 0 ,"time to scale input down min in ms", 0.4, 0.01, 1.0)
gen.add("scale_up_time", double_t , 0 ,"time to scale input up to max in ms", 0.7, 0.01, 1.0)

exit(gen.generate(PACKAGE, "robotrainer_controllers", "PassiveBehaviorController"))

