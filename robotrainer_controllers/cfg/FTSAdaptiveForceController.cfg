#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


gen.add("use_passive_behavior_ctrlr", bool_t, 0, "Activate/Deactivate passive behavior controller as last chain of the control loop.", False)
gen.add("use_velocity_adaptive_force", bool_t, 0, "Activate/Deactivate velocity-adaptive force.", False)
gen.add("enable_velocity_adaption_changes", bool_t, 0, "Enables the velocity-based force adaption and opens a view to configure it.", False)
gen.add("enable_parametrization_changes", bool_t, 0, "Opens the Paramterization view to start it and configure it.", False)

used_max_ft_type = gen.enum([ gen.const("standard_values", int_t, 0, "Use the standard maximum force-torque-values."),
                                                        gen.const("user_specific_values", int_t, 1, "Use the user-specific maximum force-torque values that resulted from base parametrization.")],
                                                                        "Switch the Type of used force-torque values, from which the velocity of the system is derived.")
gen.add("max_ft_values_used", int_t, 1, "Specifies if the basic force-torque values or the user-parametrized values should be used. Please parametrize before setting to true", 0, 0, 1, edit_method=used_max_ft_type)

parametrization = gen.add_group("User Parametrization functionalities", type="hide")
velocity_adaptive_control = gen.add_group("Velocity Adaptive feature parameters", type="hide")

parametrization.add("parameterization_activated", bool_t, 0, "Turn off Parameterization (showing parameterization status)", False);

param_step2 = parametrization.add_group("Velocity Force Paramterization", type="tab")
param_step1 = parametrization.add_group("Base Force Parameterization", type="tab")

param_step1.add("activate_force_parametrization", bool_t, 0, "Activate User input force parametrization step.", False)
param_step1.add("movingAverageTimeframe", double_t, 0, "Timeframe in seconds under which the distances are collected and averaged", 0.8, 0.2, 2.0)
param_step1.add("holdingDistance", double_t, 0, "distance in cm in which the robot must be held for a specific time in order to complete the parametrization step", 0.03, 0.02, 0.10)

param_step2.add("activate_adaptive_scale_parametrization", bool_t, 0, "Activate parametrization of the adaptive scale factors.", False)
param_step2.add("minLegDistance", double_t, 0, "minimum leg distance from pre-recorded median at which adaption is changed", 0.04, 0.01, 0.1)
param_step2.add("maxLegDistance", double_t, 0, "minimum leg distance from pre-recorded median at which adaption is changed", 0.25, 0.1, 0.3)
param_step2.add("adaptionRate", double_t, 0, "determines whether the adaption is changed stronger with more distance (values >1.0) or linear (1.0)", 1.0, 1.0, 3.0)



force_adapt = velocity_adaptive_control.add_group("Adaptive Force limits", type="tab")
smooth_transition = velocity_adaptive_control.add_group("Nonlinear transition function", type="tab")


min_ft = force_adapt.add_group("Minimum values", type="tab")
max_ft = force_adapt.add_group("Maximum values", type="tab")

min_ft.add("force_scale_minvel_x", double_t, 0, "Multiplier of base force, which is effective to move the robot from zero velocity", 1.7, 1.0, 2.0)
min_ft.add("force_scale_minvel_y", double_t, 0, "Multiplier of base force, which is effective to move the robot from zero velocity", 1.4, 1.0, 2.0)
min_ft.add("force_scale_minvel_rot", double_t, 0, "Multiplier of base force, which is effective to move the robot from zero velocity", 1.0, 1.0, 1.5)
max_ft.add("force_scale_maxvel_x", double_t, 0, "Multiplier of base force, which is effective when moving the robot at max velocity (less force needed)", 0.5, 0.35, 1.0)
max_ft.add("force_scale_maxvel_y", double_t, 0, "Multiplier of base force, which is effective when moving the robot at max velocity (less force needed)", 0.5, 0.35, 1.0)
max_ft.add("force_scale_maxvel_rot", double_t, 0, "Multiplier of base force, which is effective when moving the robot at max velocity (less force needed)", 0.30, 0.25, 1.0)


smooth_transition.add("use_smooth_transition", bool_t, 0, "Activate/Deactivate smooth transition function", True)
smooth_transition.add("transition_rate", double_t, 0, "Value between 0.05 and 1.0, which changes how fast the parameter will be adapted with low velocity, 1.0 being the fastest change (with 81% of the value at 20% of max speed", 0.55, 0.05, 1.0)


exit(gen.generate("robotrainer_controllers", "robotrainer_controllers", "FTSAdaptiveForceController"))

