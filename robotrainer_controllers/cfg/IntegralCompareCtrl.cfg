#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
PACKAGE = "robotrainer_controllers"

gen = ParameterGenerator()
onedimensional_group = gen.add_group("One Dimensional Integrals")
onedimensional_group.add("use_raw_integral", bool_t, 0, "Wether to use raw_Integral or not", False)
onedimensional_group.add("use_std_integral", bool_t, 0, "Wether to use std_Integral or not", False)
onedimensional_group.add("use_chuy_integral", bool_t, 0, "Wether to use chuy_integral or not", False)

onedimensional_group.add("use_sliding_integral", bool_t, 0, "Wether to use sliding_integral or not", False)
onedimensional_group.add("use_reset_sliding", bool_t, 0, "If activated the integral gets reset if( integralvalue < 0 && powerofSystem >0)", False)
onedimensional_group.add("sliding_integral_window_size", int_t, 0, "Resize the slidingwindow size of the integral",  512, 1, 16384)

onedimensional_group.add("use_sliding_integral_linearWeight", bool_t, 0, "Wether to use sliding_integral_linearWeight or not", False)
onedimensional_group.add("use_reset_sliding_linearWeight", bool_t, 0, "If activated the integral gets reset if( integralvalue < 0 && powerofSystem >0)", False)
onedimensional_group.add("sliding_integral_linearWeight_window_size", int_t, 0, "Resize the slidingwindow size of the integral",  512, 1, 16384)

multidimensional_group = gen.add_group("Multidiemnsional Integrals")
multidimensional_group.add("use_raw_integral_3d", bool_t, 0, "Wether to use raw_Integral_3d or not", False)
multidimensional_group.add("use_std_integral_3d", bool_t, 0, "Wether to use std_Integral_3d or not", False)
multidimensional_group.add("use_chuy_integral_3d", bool_t, 0, "Wether to use chuy_integral_3d or not", False)

multidimensional_group.add("use_sliding_integral_3d", bool_t, 0, "Wether to use sliding_integral_3d or not", False)
multidimensional_group.add("use_reset_sliding_3d", bool_t, 0, "If activated the integral gets reset if( integralvalue < 0 && powerofSystem >0)", False)
multidimensional_group.add("sliding_integral_3d_window_size", int_t, 0, "Resize the slidingwindow size of the integral",  512, 1, 16384)

multidimensional_group.add("use_sliding_integral_linearWeight_3d", bool_t, 0, "Wether to use sliding_integral_linearWeight_3d or not", False)
multidimensional_group.add("use_reset_sliding_linearWeight_3d", bool_t, 0, "If activated the integral gets reset if( integralvalue < 0 && powerofSystem >0)", False)
multidimensional_group.add("sliding_integral_linearWeight3d_window_size", int_t, 0, "Resize the slidingwindow size of the integral",  512, 1, 16384)

exit(gen.generate(PACKAGE, "robotrainer_controllers", "IntegralCompareCtrl"))


