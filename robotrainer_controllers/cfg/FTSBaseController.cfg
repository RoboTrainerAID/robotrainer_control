#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


base_controller_parameters = gen.add_group("FTS Base Controller parameters", type="collapse")

base_controller_parameters.add("reset_controller", bool_t, 0, "Reset BASE Controller to default values.", False)
base_controller_parameters.add("recalculate_FTS_offsets", bool_t, 0, "Recalculate FTS offsets.", False)
base_controller_parameters.add("apply_base_controller_params", bool_t, 0, "Applies new FTS Base Controller parameters to the robotrainer.", False)
base_controller_parameters.add("no_hw_output", bool_t, 0, "Activate/Deactivate simulation mode, in which the output is not sent to the robot.", False)
base_controller_parameters.add("use_twist_input", bool_t, 0, "Activate/Deactivate twist input from joystick.", False)

control_dimensions = base_controller_parameters.add_group("Active dimensions", type="tab")
force_configurations = base_controller_parameters.add_group("Force Torque limits", type="tab")
velocity_configurations = base_controller_parameters.add_group("Velocity limits", type="tab")
controller_configurations = base_controller_parameters.add_group("Controller configurations", type="tab")
backwards_scale_factor = base_controller_parameters.add_group("Backward direction scaledown factor", type="tab")

control_dimensions.add("x_force_controller", bool_t, 0, "Controller on/off in x-direction", True)
control_dimensions.add("y_force_controller", bool_t, 0, "Controller on/off in y-direction", True)
control_dimensions.add("rot_controller", bool_t, 0, "Controller on/off for rotation around z-axis", True)

fw_bw_controller_tab = controller_configurations.add_group("Forward Backward", type="tab")
le_re_controller_tab = controller_configurations.add_group("Left Right", type="tab")
rot_controller_tab = controller_configurations.add_group("Rotation", type="tab")

fw_bw_controller_tab.add("x_min_force", double_t, 0, "Minimal force in x-direction",    3.0, 1.0, 20.0)
fw_bw_controller_tab.add("x_max_force", double_t, 0, "Maximal force in x-direction",    120, 20.0, 200.0)
fw_bw_controller_tab.add("x_max_vel", double_t, 0, "Maximal velocity in x-direction", 0.8, 0.2, 1.6)
fw_bw_controller_tab.add("x_gain", double_t, 0, "Controller gain in in x-direction", 1.0, 0.1, 5)
fw_bw_controller_tab.add("x_time_const", double_t, 0, "Controller time constant in x-direction", 1.5, 0.1, 10)
fw_bw_controller_tab.add("backwards_max_force_scale", double_t, 0, "Scale factor for backwards maximal force", 0.25, 0, 1);
fw_bw_controller_tab.add("backwards_max_vel_scale", double_t, 0, "Scale factor for backwards maximal velocity", 0.25, 0, 1);

le_re_controller_tab.add("y_min_force", double_t, 0, "Minimal force in y-direction", 3.0, 1.0, 20.0)
le_re_controller_tab.add("y_max_force", double_t, 0, "Maximal force in y-direction", 120, 20.0, 200.0)
le_re_controller_tab.add("y_max_vel", double_t, 0, "Maximal velocity in y-direction", 0.5, 0.2, 1.6)
le_re_controller_tab.add("y_gain", double_t, 0, "Controller gain in in y-direction", 1.0, 0.1, 5.0)
le_re_controller_tab.add("y_time_const", double_t, 0, "Controller time constant  for rotation around z-axis", 1.5, 0.1, 10)

rot_controller_tab.add("rot_min_torque", double_t, 0, "Minimal torque around z-axis", 0.1, 0.01, 1)
rot_controller_tab.add("rot_max_torque", double_t, 0, "Maximal torque around z-axis", 30.0, 1, 100.0)
rot_controller_tab.add("rot_max_rot_vel", double_t, 0, "Maximal roatation velocity around z-axis", 0.5, 0.1, 1.8)
rot_controller_tab.add("rot_gain", double_t, 0, "Controller gain for rotation around z-axis", 1.0, 0.1, 10.0)
rot_controller_tab.add("rot_time_const", double_t, 0, "Controller time constant for rotation around z-axis", 0.75, 0.1, 10.0)


control_actions = gen.add_group("Robotrainer Control Actions", type="collapse")


control_actions.add("apply_control_actions", bool_t, 0, "Applies new settings of Robotrainer Control Actions to the robotrainer.", False)

spatial_control_actions = control_actions.add_group("Spatial control actions", type="tab")
global_control_actions = control_actions.add_group("Global control action", type="tab")

modality_type_enum = gen.enum([ gen.const("None", int_t, 0, "Deactivate modalities."),
                                                        gen.const("modalities", int_t, 1, "Use classic modalities (without passive behavior detection)"),
                                                        gen.const("modalities_controller", int_t, 2, "Use modalities controller, which has passive behavior detection")],
                                                                        "Switch the Type of active modality.")
spatial_control_actions.add("spatial_control_action_type", int_t, 1, "Which type of modality should be active", 0, 0, 2, edit_method=modality_type_enum)
area_counterforce = spatial_control_actions.add_group("Area Counterforce", type="tab")
area_counterforce.add("counterforce_area_scaledown_dist", double_t, 0, "Distance factor from center at which the counterforce is lineary reduced until reching zero at the area border", 0.5, 0.0, 1.0)
area_counterforce.add("area_counter_force_x", double_t, 0, "Counter force value in x-direction (against user)", 20.0, 0.0, 70.0)
area_counterforce.add("area_counter_force_y", double_t, 0, "Counter force value in y-direction (positive values for force from left)", 0.0, 0.0, 25.0)
area_counterforce.add("area_counter_torque_rot", double_t, 0, "Counter torque value in rotational degree (positive values for clockwise torque)", 0.0, 0.0, 8.0)


reverse_dimensions = global_control_actions.add_group("Reverse Dimensions", type="tab")
static_counter_force = global_control_actions.add_group("Static Counterforce", type="tab")
adaptive_center_of_gravity = global_control_actions.add_group("Adaptive Center of Gravity", type="tab")

reverse_dimensions.add("y_reversed", bool_t, 0, "Reversed control in y-axis direction. Postive directions will be interpreted as negative.", False)
reverse_dimensions.add("rot_reversed", bool_t, 0, "Reversed control of rotation. Postive directions will be interpreted as negative.", False)

static_counter_force.add("enable_counter_force", bool_t, 0, "Activate/Deactivate static counter force.", False)
static_counter_force.add("counter_force_x", double_t, 0, "Counter force value in x-direction (against user)", 20.0, 0.0, 70.0)
static_counter_force.add("counter_force_y", double_t, 0, "Counter force value in y-direction (positive values for force from left)", 0.0, 0.0, 25.0)
static_counter_force.add("counter_torque_rot", double_t, 0, "Counter torque value in rotational degree (positive values for clockwise torque)", 0.0, 0.0, 8.0)

adaptive_center_of_gravity.add("adapt_center_of_gravity", bool_t, 0, "Activate/Deactivate virtual center of gravity.", True)
adaptive_center_of_gravity.add("cog_x", double_t, 0, "Distance from real center of robot towards the virtual (adapted) center of gravity in x-direction (positive values away from the user)", 0.5, -1, 2)
adaptive_center_of_gravity.add("cog_y", double_t, 0, "Distance from real center of robot towards the virtual (adapted) center of gravity in y-direction (positive values create clockwise rotation", 0.0, -1, 1)


exit(gen.generate("robotrainer_controllers", "robotrainer_controllers", "FTSBaseController"))

